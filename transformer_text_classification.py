# -*- coding: utf-8 -*-
"""transformer_text_classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12pBZnM9MBkVddEzlbnRoX4iakogp-3Hw

# Integrantes do grupo

João Pedro Baeta

Josiel Santana

Jules Severo

Stefany Fernandes

**Observações:**

Após a execução das células

```
!pip install datasets
```
e

```
!pip install accelerate>=0.21.0
```
é necessário **reiniciar o ambiente de execução** para as alterações serem realizadas e não ocorrer nenhum erro durante o processo de execução do modelo de classificação do texto.

# Setup
"""

!pip install datasets

!pip install accelerate>=0.21.0

"""# Dataset"""

import pandas as pd

url = "https://media.githubusercontent.com/media/StefanyFernandes675/PLN-Text-Classification/main/dataset.csv"
df = pd.read_csv(url)

df.head()

"""# Bert model"""

from transformers import AutoTokenizer
tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')

def process_data(row):

    text = row['review']
    text = str(text)
    text = ' '.join(text.split())

    encodings = tokenizer(text, padding="max_length", truncation=True, max_length=128)

    label = 0
    if row['sentiment'] == 'positive':
        label += 1

    encodings['label'] = label
    encodings['text'] = text

    return encodings

processed_data = []

for i in range(len(df[:1000])):
    processed_data.append(process_data(df.iloc[i]))

from sklearn.model_selection import train_test_split

new_df = pd.DataFrame(processed_data)

train_df, valid_df = train_test_split(
    new_df,
    test_size=0.2,
    random_state=2022
)

import pyarrow as pa
from datasets import Dataset

train_hg = Dataset(pa.Table.from_pandas(train_df))
valid_hg = Dataset(pa.Table.from_pandas(valid_df))

from transformers import AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(
    'bert-base-uncased',
    num_labels=2
)

from transformers import TrainingArguments, Trainer

training_args = TrainingArguments(output_dir="./result", evaluation_strategy="epoch")

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_hg,
    eval_dataset=valid_hg,
    tokenizer=tokenizer
)

trainer.train()

trainer.evaluate()

model.save_pretrained('./model/')

from transformers import AutoModelForSequenceClassification
import torch

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

new_model = AutoModelForSequenceClassification.from_pretrained('./model/').to(device)

from transformers import AutoTokenizer

new_tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')

import torch
import numpy as np

def get_prediction(text):
    encoding = new_tokenizer(text, return_tensors="pt", padding="max_length", truncation=True, max_length=128)
    encoding = {k: v.to(trainer.model.device) for k,v in encoding.items()}

    outputs = new_model(**encoding)

    logits = outputs.logits
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    sigmoid = torch.nn.Sigmoid()
    print(sigmoid)
    probs = sigmoid(logits.squeeze().cpu())
    probs = probs.detach().numpy()
    label = np.argmax(probs, axis=-1)

    if label == 1:
        return {
            'sentiment': 'Positive',
            'probability': probs[1]
        }
    else:
        return {
            'sentiment': 'Negative',
            'probability': probs[0]
        }

get_prediction('I am not happy to see you.')

get_prediction('I am happy to see you.')